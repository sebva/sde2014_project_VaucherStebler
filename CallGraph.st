Object subclass: #CallGraph	instanceVariableNames: 'ranks'	classVariableNames: ''	poolDictionaries: ''	category: 'CallGraph'!!CallGraph commentStamp: 'RogerStebler 11/12/2014 21:07' prior: 0!A CallGraph uses the class hierarchy analyzer (CHA) algorithm to generate a call graph for a FAMIX model.!!CallGraph methodsFor: 'creating' stamp: 'RogerStebler 12/9/2014 16:20'!generateAll"Generates a dictionary containing for each method a set of possible receivers"	| numOfMethods |	numOfMethods := MooseModel root first allModelMethods size.	^self generate: numOfMethods.! !!CallGraph methodsFor: 'creating' stamp: 'RogerStebler 12/9/2014 15:55'!ranks	^ranks! !!CallGraph methodsFor: 'creating' stamp: 'RogerStebler 12/9/2014 16:08'!generate: aNumber"Generates a dictionary containing for each method a set of possible receivers. Only uses N methods with the largest LOC * NOIC value"	| collection sortedCollection methods method class coneSet possibleReceivers dict rank |	collection := MooseModel root first allModelMethods collect: [ :each | each->(each numberOfLinesOfCode * each incomingInvocations size) ].	sortedCollection := collection asSortedCollection: [:x :y | x value > y value].	methods := sortedCollection first: aNumber.		dict := Dictionary new.	ranks := Dictionary new.	rank := 0.	methods do: [ :methodAssoc | 		rank := rank+1.		method := methodAssoc key.		ranks at: method put: rank.		class := method belongsTo.		coneSet :=  self cone: class.		(coneSet size > 1) ifTrue: [ 			possibleReceivers := Set new.			coneSet do: [ :c |				c methods do: [ :m | m signature = method signature ifTrue: [ possibleReceivers add: c ] ]			]		] ifFalse: [ possibleReceivers := coneSet ].		dict at: method put: possibleReceivers.	].	^dict.! !!CallGraph methodsFor: 'private' stamp: 'RogerStebler 11/12/2014 21:08'!cone: aFamixClass"set of all subclasses, including the class itself"	| coneSet |	coneSet := aFamixClass withSubclassHierarchyGroup asSet.	^coneSet! !